---
- name: Check if kubeadm has already run
  stat:
    path: "/var/lib/kubelet/config.yaml"
  register: kubeadm_already_run

- debug:
    msg: "kubeadm init {{ '--control-plane-endpoint ' + control_plane_endpoint if control_plane_endpoint is defined }} {{ '--pod-network-cidr ' + pod_network_cidr if pod_network_cidr is defined }} --upload-certs"

- name: Initialize the Kubernetes cluster using kubeadm
  command: "kubeadm init {{ '--control-plane-endpoint ' + control_plane_endpoint if control_plane_endpoint is defined }} {{ '--pod-network-cidr ' + pod_network_cidr if pod_network_cidr is defined }} --upload-certs"
  when:
    - not kubeadm_already_run.stat.exists

- name: Check if root has ~/.kube/conf
  stat:
    path: "/root/.kube/config"
  register: root_kube_conf

- name: Setup kubeconfig for root user.
  command: "{{ item }}"
  with_items:
    - mkdir -p /root/.kube
    - /bin/cp /etc/kubernetes/admin.conf /root/.kube/config
  when:
    - not root_kube_conf.stat.exists

- name: Copy admin.conf file to local file ./kubeadmin.conf
  fetch:
    src: /etc/kubernetes/admin.conf
    dest: "../etc/kubeadmin.conf"
    flat: "yes"

- name: Check if calico kubeconfig exists
  stat:
    path: "/etc/cni/net.d/calico-kubeconfig"
  register: calico_kubeconfig

- name: Install calico pod network
  command: kubectl create -f https://docs.projectcalico.org/{{ calico_version }}/manifests/calico.yaml
  when:
    - not calico_kubeconfig.stat.exists

# Cilium requires kernel version is >= 4.8.0 - maybe someday :-(
# https://github.com/timhughes/vagrant_ansible_k8s_cluster/issues/4
#- name: Check if Cilium is configured
#  command: kubectl get configmaps cilium-config -n kube-system
#  failed_when: false
#  changed_when: false
#  register: cilium_configured
#
#- name: Install Cilium pod network
#  #become: false
#  command: kubectl create -f https://raw.githubusercontent.com/cilium/cilium/{{ cilium_version }}/install/kubernetes/quick-install.yaml
#  when: cilium_configured.rc == 1

- name: Generate join command
  command: kubeadm token create --print-join-command
  register: join_command

- name: Set certificate_key
  set_fact:
    certificate_key: "{{ lookup('password', '/dev/null length=64 chars=hexdigits') }}"

- name: Reupload certs with known certificate_key
  command: "kubeadm init phase upload-certs --upload-certs --certificate-key {{  certificate_key }}"

- name: Copy control join command to local file
  become: false
  delegate_to: localhost
  copy:
    content: "{{ join_command.stdout_lines[0] + ' --control-plane --certificate-key ' + certificate_key}}"
    dest: "../tmp/control-join-command"

- name: Copy worker join command to local file
  become: false
  delegate_to: localhost
  copy:
    content: "{{ join_command.stdout_lines[0] }}"
    dest: "../tmp/join-command"
